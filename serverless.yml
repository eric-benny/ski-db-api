# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ski-db-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

useDotenv: true

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  apiGateway:
    apiKeys:
      - ${opt:stage}-ski-key

plugins:
  - serverless-offline
  - serverless-bundle # Package our functions with Webpack

# custom:
#   database:
#     dev: skiDBdev
#     prod: skiDB

	
# Environment Variables
# environment:
#   DB_NAME: ${self:custom.database.${self:provider.stage}}

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  createManufacturer:
    handler: functions/manufacturer.create
    events:
      - http:
          path: manufacturers
          method: post
          cors: true
          private: true
  getManufacturer:
    handler: functions/manufacturer.get
    events:
      - http:
          path: manufacturers
          method: get
          cors: true
          private: true
  createSkiFamily:
    handler: functions/skiFamily.create
    events:
      - http:
          path: skiFamilies
          method: post
          cors: true
          private: true
  getSkiFamily:
    handler: functions/skiFamily.get
    events:
      - http:
          path: /manufacturer/{manufacturer}/skiFamilies
          method: get
          cors: true
          private: true
      - http:
          path: skiFamilies
          method: get
          cors: true
          private: true
  createUser:
    handler: functions/user.create
    events:
      - http:
          path: users
          method: post
          cors: true
          private: true
  getUser:
    handler: functions/user.get
    events:
      - http:
          path: /users/{userId}
          method: get
          cors: true
          private: true
      - http:
          path: /users
          method: get
          cors: true
          private: true
  addUserFavorite:
    handler: functions/user.addFavorite
    events:
      - http:
          path: users/{userId}/favorites/{skiId}
          method: post
          cors: true
          private: true
  removeUserFavorite:
    handler: functions/user.removeFavorite
    events:
      - http:
          path: users/{userId}/favorites/{skiId}
          method: delete
          cors: true
          private: true
  createSki:
    handler: functions/createSki.create
    events:
      - http:
          path: skis
          method: post
          cors: true
          private: true
  updateSki:
    handler: functions/updateSki.update
    events:
      - http:
          path: skis/{skiId}
          method: put
          cors: true
          private: true
  deleteSki:
    handler: functions/deleteSki.deleteSki
    events:
      - http:
          path: skis/{skiId}
          method: delete
          cors: true
          private: true
  getSkis:
    handler: functions/getSkis.get
    events:
      - http:
          path: skis
          method: get
          cors: true
          private: true
      - http:
          path: /skis/{skiId}
          method: get
          cors: true
          private: true
  getSkisGuideSkis:
    handler: functions/getGuideSkis.getSki
    events:
      - http:
          path: /skis/{skiId}/guideSkis
          method: get
          cors: true
          private: true
  createSkiComp:
    handler: functions/createSkiComp.create
    events:
      - http:
          path: skiComps
          method: post
          cors: true
          private: true
  getSkiComps:
    handler: functions/getSkiComps.get
    events:
      - http:
          path: skiComps
          method: get
          cors: true
          private: true
      - http:
          path: /skiComps/{skiCompId}
          method: get
          cors: true
          private: true
  updateSkiComp:
    handler: functions/updateSkiComp.update
    events:
      - http:
          path: skiComps/{skiCompId}
          method: put
          cors: true
          private: true
  deleteSkiComp:
    handler: functions/deleteSkiComp.deleteSkiComp
    events:
      - http:
          path: skiComps/{skiCompId}
          method: delete
          cors: true
          private: true
  createGuideSki:
    handler: functions/createGuideSki.create
    events:
      - http:
          path: guideSkis
          method: post
          cors: true
          private: true
  getGuideSkis:
    handler: functions/getGuideSkis.get
    events:
      - http:
          path: guideSkis
          method: get
          cors: true
          private: true
      - http:
          path: /guideSkis/{guideSkiId}
          method: get
          cors: true
          private: true
  updateGuideSki:
    handler: functions/updateGuideSki.update
    events:
      - http:
          path: guideSkis/{guideSkiId}
          method: put
          cors: true
          private: true
  deleteGuideSki:
    handler: functions/deleteGuideSki.deleteGuideSki
    events:
      - http:
          path: guideSkis/{guideSkiId}
          method: delete
          cors: true
          private: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
